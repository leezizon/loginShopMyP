#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
// const WebSocket = require('ws');
const {Server} = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
      origin: "http://localhost:5500",
      methods: ["GET", "POST"]
  }
});
var guestList = [];
var userList = [];
var roomList = [];

var userSnList = [0,0,0]; //sn번호배정
var userTokenList = [0,0,0]; //토큰이미지배정



let connectedClients = {};


io.on("connection",(socket)=>{
  socket.onAny((event)=>{
    console.log(event);
  });

  //프론트에서 방 참가 이후 백에서 처리
  socket.on("room", (roomName,profiliImg) =>{
    // close the database connection
    socket.join(roomName);

    //방은 중복으로 리스트에 넣지 않는다
    if (!roomList.includes(roomName)) {
      roomList.push(roomName);
      guestList.push([]);
      userList.push([]);
    }

    var myRoomIdx = roomList.indexOf(roomName);
    guestList[myRoomIdx].push(socket.id);

    console.log(roomList);
    console.log(myRoomIdx);
    console.log(profiliImg);
    //방에 참여한 유저들에게 방에 참여한 유저들의 리스트를 보내준다
    socket.emit("guestList",guestList[myRoomIdx],socket.id,userList[myRoomIdx],userSnList[myRoomIdx],userTokenList[myRoomIdx],profiliImg);
    userSnList[myRoomIdx] = userSnList[myRoomIdx] + 1;
    if(userTokenList[myRoomIdx] < 5){
      userTokenList[myRoomIdx] = userTokenList[myRoomIdx] +1;
    }else{
      userTokenList[myRoomIdx] = 0;
    }
  
    //프론트에서 방에 있는 모든 사람들의 리스트를 받음
    socket.on("updateGuestListOne", (List) =>{
      userList[myRoomIdx] = List;//방에 있는 유저들의 리스트 업데이트
      io.to(roomName).emit("updateGuestList", userList[myRoomIdx]);//다시 프론트로 유저리스트 보내줌
    });
  

    socket.on("talkB", (sentence, userMeImg, img, nic) =>{
      io.to(roomName).emit("talkF", sentence,userMeImg,img,nic);
    });
  
    socket.on("disconnecting", () =>{
      if(guestList[myRoomIdx].length == 1){
        // console.log(userList[myRoomIdx].length);
        // console.log(userList[myRoomIdx]);
        // console.log(guestList[myRoomIdx]);
        guestList[myRoomIdx].splice(0,1);
        userList[myRoomIdx].splice(0,1);
        console.log('혼자였는데나감');
        //userList guestList 크기가 같은지 비교
        if(userList[myRoomIdx].length!=guestList[myRoomIdx].length){
          console.log('오류가 있는 방입니다, 방을 비웁니다');
          guestList[myRoomIdx].splice(0);
          userList[myRoomIdx].splice(0);
        }
      }else{
        socket.rooms.forEach((room)=>socket.to(room).emit("bye",socket.id));
        for (let i = guestList[myRoomIdx].length - 1; i >= 0; i--){
          if(guestList[myRoomIdx][i]===socket.id){
            guestList[myRoomIdx].splice(i,1);
            console.log('나감');
          }
        }
      }
    });


  });

  socket.on("otherRoom", (roomName) =>{
    const roomSizeIn = io.sockets.adapter.rooms.get(roomName)?.size || 0;
    if(roomSizeIn < 5){
      socket.join(roomName);
      connectedClients[socket.id] = socket;
      io.to(roomName).emit("setUser",Object.keys(connectedClients));
      console.log(`게임유저 들어왓습니다~ ${roomSizeIn}명`);
    }else{
      console.log(`정원초과`);
    }

    socket.on("sendAllS", (userInfo,stateSrc) =>{
      io.to(roomName).emit('sendAllF', socket.id, userInfo, stateSrc);
      console.log(stateSrc);
    })

    socket.on("disconnecting", () =>{
      delete connectedClients[socket.id];
      socket.broadcast.emit('setUser', Object.keys(connectedClients));
      Object.keys(connectedClients).forEach(Client => {
          console.log(connectedClients[Client].id);
          console.log(Client);
          console.log('------------------------------------------------');
      });
      const roomSizeOut = io.sockets.adapter.rooms.get(roomName)?.size || 0;
      console.log(`방을 나갑니다${roomSizeOut}명`);
    })
  })
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
