#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
// const WebSocket = require('ws');
const {Server} = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
      origin: "http://localhost:8080",
      methods: ["GET", "POST"]
  }
});

const axios = require('axios');

const jwt = require('jsonwebtoken');
const SECRET = "your-256-bit-secret-which-should-be-at-least-32-bytes-zizonstests"; // Java 서버와 동일한 키

io.use((socket, next) => {
    const token = socket.handshake.auth.token;
    try {
        const user = jwt.verify(token, SECRET);
        socket.user = user;
        next();
    } catch (err) {
        return next(new Error('Authentication error'));
    }
});


var userList = {};



io.on("connection",(socket)=>{  
  socket.onAny((event)=>{
    console.log(event);
  });

  //프론트에서 방 참가 이후 백에서 처리
  socket.on("room", async (roomName) =>{
    try {
      // Java 서버에 룸 존재 여부 확인
      const response = await axios.get(`http://localhost:8080/TeamFirst/api/room/exists?roomId=${roomName}`);
      const exists = response.data.exists;
      console.log(exists);
      
      if (exists) {
        // close the database connection
        socket.join(roomName);
        if(userList[roomName]== undefined){//방이름이 없으면
          userList[roomName] = [];//방이름으로 방에 있는 유저리스트를 관리하기 위한 객체 생성
        }

        console.log(userList);
        //방에 참여한 유저들에게 방에 참여한 유저들의 리스트를 보내준다
        socket.emit("guestList",socket.user.email,userList[roomName]);
      
        //프론트에서 방에 있는 모든 사람들의 리스트를 받음
        socket.on("updateGuestListOne", (List) =>{
          userList[roomName] = List;//방에 있는 유저들의 리스트 업데이트
          io.to(roomName).emit("updateGuestList", userList[roomName]);//다시 프론트로 유저리스트 보내줌
        }); 

        socket.on("talkB", (sentence, nic) =>{
          io.to(roomName).emit("talkF", sentence,nic);
        });
      
        socket.on("disconnecting", () =>{
          if(userList[roomName].length == 1){
            userList[roomName].splice(0,1);
          }else{
            socket.rooms.forEach((room)=>socket.to(room).emit("bye",socket.user.email));
            for (let i = userList[roomName].length - 1; i >= 0; i--){
              if(userList[roomName][i].id===socket.user.email){
                userList[roomName].splice(i,1);
              }
            }
          }
        });
      } else {
        // 룸이 없다면 클라이언트에 알림
        socket.emit("room-error", { message: "존재하지 않는 방입니다." });
      }
    } catch (error) {
      console.error("자바 서버 확인 중 오류 발생:", error.message);
      socket.emit("room-error", { message: "서버 오류로 방 확인 실패" });
    }
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
